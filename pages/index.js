import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Banner from '../components/banner';
import Card from '../components/card';

import UseTrackLocation from '../hooks/use-track-location';
import { fetchCoffeeStores } from '../lib/coffee-stores';
import { useEffect, useState, useContext } from 'react';
import { ACTION_TYPES, StoreContext } from '../store/store-context';

export const getStaticProps = async () => {
  
  const coffeeStores = await fetchCoffeeStores();

  return {
    props: {
      coffeeStores,
    }
  }
} 

export default function Home({coffeeStores}) {

  const { handleTrackLocation, locationErrorMsg, isFindingLocation } = UseTrackLocation();

  const { dispatch, state } = useContext(StoreContext);

  const { nearbyCoffeeStores, latLong } = state;

  // const [nearbyCoffeeStores, setNearbyCoffeeStores] = useState('');
  const [coffeeStoreError, setCoffeeStoreError] = useState(null);

  useEffect(() => {
    const setCoffeeStoresByLocation = async () => {
      console.log(latLong)
      if(latLong) {
        try {
          
          const fetchedCoffeeStores = await fetch(`/api/getCoffeeStoresByLocation?latLong=${latLong}&limit=30`);

          const nearbyCoffeeStores = await fetchedCoffeeStores.json();
          // setNearbyCoffeeStores(fetchedCoffeeStores);
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {
              nearbyCoffeeStores,
            }
          });
          setCoffeeStoreError("");
        } catch(error) {
          setCoffeeStoreError(error.message)
        }
      }
    }
    setCoffeeStoresByLocation();
  }, [latLong])

  const handleOnBannerBtnClick = () => {
    handleTrackLocation();
  }
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner buttonText={isFindingLocation ? "Locating..." : "View shops nearby"} handleOnClick={handleOnBannerBtnClick} />
        {locationErrorMsg && <p>Something went wrong: {locationErrorMsg}</p>}
        {coffeeStoreError && <p>Something went wrong: {coffeeStoreError}</p>}
        <figure className={styles.heroImage}>
          <Image src="/static/hero-image__small.png" width="600" height="400"/>
        </figure>

        {nearbyCoffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Nearby Coffee Stores</h2>
            <div className={styles.cardLayout}>
              {nearbyCoffeeStores.map(coffeeStore => {
                return (
                <Card
                  key={coffeeStore.fsq_id}
                  className={styles.card} 
                  name={coffeeStore.name} 
                  imgUrl={coffeeStore.imgUrl}
                  href={`/coffee-store/${coffeeStore.fsq_id}`} 
                />
                )
              })}
            </div>
          </div>
        )}
        
        {coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Oslo Coffee Stores</h2>
            <div className={styles.cardLayout}>
              {coffeeStores.map(coffeeStore => {
                return (
                <Card
                  key={coffeeStore.fsq_id}
                  className={styles.card} 
                  name={coffeeStore.name} 
                  imgUrl={coffeeStore.imgUrl}
                  href={`/coffee-store/${coffeeStore.fsq_id}`} 
                />
                )
              })}
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
